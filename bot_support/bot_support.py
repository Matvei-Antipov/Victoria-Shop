#imports

import asyncpg
import datetime
import requests
import base64
from bson import ObjectId
from pymongo import MongoClient
from aiogram import Dispatcher, Bot, types, executor
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
	ContentType
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import API_TOKEN, CLUSTER_URL, DATABASE_CONFIG
from keyboards import (
    keyboard_main,
	keyboard_main_ua,
    keyboard_admin,
    keyboard_back,
	keyboard_back_ua,
	keyboard_lang,
	keyboard_goods,
	keyboard_skip,
	keyboard_settings_list,
	keyboard_status,
	keyboard_category,
	keyboard_country,
	keyboard_back_prescr
)
from functions import (
    get_time_from_datetime,
    can_make_new_ticket,
    get_last_ticket_time,
    get_user_status,
	get_income,
	uah_usd_convertor,
	usd_uah_convertor,
	usd_egp_convertor,
	uah_egp_convertor,
	uah_try_convertor,
	format_response,
	generate_random_4_digit_number,
	translate_text,
	display_records
)
from constants import template_reply, template_reply_rules_of_presc, template_reply_ua

#api_token

token = API_TOKEN
bot = Bot(token)
dp = Dispatcher(bot, storage=MemoryStorage())

#database MongoDB

cluster = MongoClient(CLUSTER_URL)

db = cluster['VIC_BOT_SUPPORT']
collection_users = db['collection_users']
collection_tickets = db['collection_tickets']
collection_accounting = db['collection_accounting']
collection_goods = db['collection_goods']

#database PostgreSQL

async def on_startup(dp):
    try:
        dp['db'] = await asyncpg.create_pool(**DATABASE_CONFIG)
        print("Connected to PostgreSQL")
    except Exception as e:
        print(f"Error of connection to PostgreSQL: {e}")

async def on_shutdown(dp):
    try:
        await dp['db'].close()
        print("Closed PostgreSQL")
    except Exception as e:
        print(f"Error of closing PostgreSQL: {e}")

#states

class ClientStates(StatesGroup):

	ticket = State()
	ticket_ua = State()
	document_income = State()
	document_expense = State()
	document_deals = State()
	uah_usd = State()
	usd_uah = State()
	usd_egp = State()
	uah_egp = State()
	uah_try = State()
	presc_good = State()
	get_articul = State()
	get_name = State()
	get_price = State()
	get_prescription = State()

class AdministratorUploadHandler(StatesGroup):
    uploading = State()

#check_in

check_in = {'‚ùì –°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'}
admins = {'matvei_dev', 'victoria_rudnevvva'}

#start message

@dp.message_handler(commands=['start'])
async def start_buttons(message: types.Message):
	user_id = message.from_user.username
	if user_id is not None:
		if user_id in admins:
			status = 'administrator'
		else:
			status = 'default'
		user = {
			'tg_name': user_id,
			'status': status
		}
		existing_user = collection_users.find_one({'tg_name': user_id})
		if existing_user:
			user_status = get_user_status(user_id)
			if user_status == 'administrator':
				keyboard_lang = InlineKeyboardMarkup().add(
					InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫", callback_data='lang_ru')
				)
					
				await message.answer(
					f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name}*!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
					reply_markup=keyboard_lang,
					parse_mode='Markdown'
				)
			else:
				keyboard_lang = InlineKeyboardMarkup().add(
					InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ üá∫üá¶", callback_data='lang_ua_def'),
					InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫", callback_data='lang_ru_def')
				)
					
				await message.answer(
					f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name}*!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
					reply_markup=keyboard_lang,
					parse_mode='Markdown'
				)
		else:
			collection_users.insert_one(user)
			user_status = get_user_status(user_id)
			if user_status == 'administrator':
				keyboard_lang = InlineKeyboardMarkup().add(
					InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ üá∫üá¶", callback_data='lang_ua'),
					InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫", callback_data='lang_ru')
				)
					
				await message.answer(
					f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name}*!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
					reply_markup=keyboard_lang,
					parse_mode='Markdown'
				)
			else:
				keyboard_lang = InlineKeyboardMarkup().add(
					InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ üá∫üá¶", callback_data='lang_ua_def'),
					InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫", callback_data='lang_ru_def')
				)
					
				await message.answer(
					f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name}*!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
					reply_markup=keyboard_lang,
					parse_mode='Markdown'
				)
	else:
		await message.answer(
			'–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª—É–∂–±–æ–π —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—ã *–æ–±—è–∑–∞–Ω—ã* —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ Telegram',
			parse_mode='Markdown'
			)

#handlers(RU, administration GUI)

@dp.callback_query_handler(lambda c: c.data == 'lang_ru')
async def administrator_gui(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)
	if user_status == 'administrator':
		keyboard_admin = InlineKeyboardMarkup().add(
			InlineKeyboardButton("üìñ –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π", callback_data='list_of_tickets'),
			InlineKeyboardButton("üíµ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç", callback_data='accountant_reply'),
			InlineKeyboardButton("üìï –†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data='job_with_goods'),
			InlineKeyboardButton("üí∏ –ö–æ–Ω–≤–µ—Ä—Ç–æ—Ä –≤–∞–ª—é—Ç", callback_data='convertator')
		)
		
		await bot.send_message(
			callback_query.from_user.id,
			f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{callback_query.from_user.first_name}*!\n\n–£–≤–∞–∂–∞–µ–º—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π:',
			reply_markup=keyboard_admin,
			parse_mode='Markdown',
		)

@dp.callback_query_handler(lambda c: c.data == 'list_of_tickets')
async def administrator_list_of_tickets(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status == 'administrator':
		records_amount = collection_tickets.count_documents({})
		if records_amount == 0:
			await callback_query.bot.send_message(
				callback_query.from_user.id,
				f'–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {records_amount} –∑–∞–ø–∏—Å–µ–π.',
				reply_markup=keyboard_back
			)
		else:
			keyboard_list = InlineKeyboardMarkup().add(
				InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
			)

			for record in collection_tickets.find():
				text = record['tg_name']
				callback_data = f"show_record_tickets{record['_id']}"
				keyboard_list.add(InlineKeyboardButton(text=text, callback_data=callback_data))
				await callback_query.bot.send_message(
					callback_query.from_user.id,
					f'–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {records_amount} –∑–∞–ø–∏—Å–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
					reply_markup=keyboard_list,
				)

@dp.callback_query_handler(lambda query: query.data.startswith("show_record_tickets"))
async def show_record_callback(callback_query: types.CallbackQuery):
    record_id = str(callback_query.data.split("_")[2])
    word_to_remove = "tickets"
    record_id = record_id.replace(word_to_remove, '')
    record = collection_tickets.find_one({"_id": ObjectId(record_id)})

    if record:
        prompt = record.get('prompt')
        tg_name = record.get('tg_name')
        number = record.get('number')
        date = record.get('date')
        ticket_text = f"–¢–∏–∫–µ—Ç ‚Ññ{number}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  @{tg_name}\n\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:  {date}\n\n–¢–µ–ª–æ —Ç–∏–∫–µ—Ç–∞:\n{prompt}"

        keyboard = InlineKeyboardMarkup(row_width=2)
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
        answered_button = InlineKeyboardButton(text="‚úîÔ∏è –û—Ç–≤–µ—Ç –±—ã–ª –¥–∞–Ω", callback_data=f"answered_{record_id}")
        alarm_button = InlineKeyboardButton(text="üì£ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—å –õ–°", callback_data=f"alarm_{record_id}")
        keyboard.add(back_button, answered_button, alarm_button)

        await bot.send_message(callback_query.from_user.id, ticket_text, reply_markup=keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=keyboard_back)


@dp.callback_query_handler(lambda query: query.data.startswith("answered_"))
async def close_or_answer_callback(callback_query: types.CallbackQuery):
    try:
        action, record_id = callback_query.data.split("_", 1)
        record = collection_tickets.find_one({"_id": ObjectId(record_id)})

        if record:
            user_id = record.get('user_id')

            if action == "answered":
                collection_tickets.delete_one({"_id": ObjectId(record_id)})
                message_text = "–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª —Ä–µ—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!"

            await bot.send_message(user_id, message_text, reply_markup=keyboard_back)
            await bot.send_message(callback_query.from_user.id, f"–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {message_text}", reply_markup=keyboard_back)
        else:
            await bot.send_message(callback_query.from_user.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=keyboard_back)
    except Exception:
        await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", reply_markup=keyboard_back)

@dp.callback_query_handler(lambda query: query.data.startswith("alarm_"))
async def alarm(callback_query: types.CallbackQuery):
    try:
        action, record_id = callback_query.data.split("_", 1)
        record = collection_tickets.find_one({"_id": ObjectId(record_id)})

        if record:
            user_id = record.get('user_id')

            if action == "alarm":
                message_text = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤—ã –∑–∞–∫—Ä—ã–ª–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏—Ö –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏! –° –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–º–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."

            await bot.send_message(user_id, message_text, reply_markup=keyboard_back)
            await bot.send_message(callback_query.from_user.id, f"–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!", reply_markup=keyboard_back)
        else:
            await bot.send_message(callback_query.from_user.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=keyboard_back)
    except Exception:
        await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", reply_markup=keyboard_back)

@dp.callback_query_handler(lambda c: c.data == 'accountant_reply')
async def administrator_accountant(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status=='administrator':
		keyboard_accountant = InlineKeyboardMarkup().add(
			InlineKeyboardButton("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='upload_document'),
			InlineKeyboardButton("‚¨áÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–∏ –º–µ—Å—è—Ü–∞", callback_data='get_document'),
			InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
		)

	await bot.send_message(
			callback_query.from_user.id,
			f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{callback_query.from_user.first_name}*!\n\n–£–≤–∞–∂–∞–µ–º—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏:',
			reply_markup=keyboard_accountant,
			parse_mode='Markdown',
		)

@dp.callback_query_handler(lambda c: c.data == 'upload_document')
async def administrator_accountant_upload(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status=='administrator':
		await ClientStates.document_income.set()

		await bot.send_message(
		callback_query.from_user.id,
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{callback_query.from_user.first_name}*!\n\n–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å –±–µ–∑ –∑–Ω–∞—á–∫–∞ –≤–∞–ª—é—Ç—ã —Å–ª–∏—Ç–Ω–æ\n\n–ù–∞–ø—Ä–∏–º–µ—Ä –¥–æ—Ö–æ–¥ –≤ 12.000–≥—Ä–Ω –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ - 12000',
        reply_markup=keyboard_back,
        parse_mode='Markdown',
    )

@dp.message_handler(state=ClientStates.document_income)
async def create_income(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.username
        user_status = get_user_status(user_id)
        day = datetime.datetime.now().date()
        converted_datetime = datetime.datetime.combine(day, datetime.datetime.min.time())
        formatted_date = converted_datetime.strftime("%Y-%m-%d")
        existing_record = collection_accounting.find_one({"day": formatted_date})

        if user_status == 'administrator':
            if not existing_record:
                data['document_income'] = message.text
                income = {
                    'income': data['document_income'],
                    'day': formatted_date
                }
                collection_accounting.insert_one(income)
                await state.finish()
                await message.answer('–ó–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–∞—Ö —Å–æ–∑–¥–∞–Ω–∞!')
            else:
                await state.finish()
                await message.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:', reply_markup=keyboard_admin)


@dp.callback_query_handler(lambda c: c.data == 'get_document')
async def administrator_accountant_get(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status=='administrator':
		await bot.send_message(
			callback_query.from_user.id,
			f'{get_income()}'
		)
@dp.callback_query_handler(lambda c: c.data == 'convertator')
async def administrator_currency(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status == 'administrator':
		keyboard_convertator = InlineKeyboardMarkup().add(
			InlineKeyboardButton("‚Ç¥ UAH/USD $", callback_data='uah_usd'),
			InlineKeyboardButton("$ USD/UAH ‚Ç¥", callback_data='usd_uah'),
			InlineKeyboardButton("$ USD/EGP ¬£", callback_data='usd_egp'),
			InlineKeyboardButton("‚Ç¥ UAH/EGP ¬£", callback_data='uah_egp'),
			InlineKeyboardButton("‚Ç¥ UAH/TRY ‚Ç∫", callback_data='uah_try'),
			InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
		)
		await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä:', reply_markup=keyboard_convertator)

@dp.callback_query_handler(lambda query: query.data == 'uah_usd')
async def administrator_uah_usd(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status == 'administrator':
		await ClientStates.uah_usd.set()

		await bot.send_message(
			callback_query.from_user.id,
			'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã *UAH(–ì–†–ù)*, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ *USD(–î–û–õ)*:',
			parse_mode='Markdown',
			reply_markup=keyboard_back
		)

@dp.message_handler(state=ClientStates.uah_usd)
async def create_income(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		user_id = message.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			data['uah_usd'] = message.text
			await message.answer(
				f"*{data['uah_usd']}* –≥—Ä–Ω = *{uah_usd_convertor(data['uah_usd'])}* –¥–æ–ª",
				parse_mode='Markdown',
				reply_markup=keyboard_back
			)

@dp.callback_query_handler(lambda query: query.data == 'usd_uah')
async def administrator_usd_uah(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status == 'administrator':
		await ClientStates.usd_uah.set()

		await bot.send_message(
			callback_query.from_user.id,
			'–í–≤–µ–¥–∏—Ç–µ  —Ü–µ–ª–æ–µ –∫–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã *USD(–î–û–õ)*, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ *UAH(–ì–†–ù)*:',
			parse_mode='Markdown',
			reply_markup=keyboard_back
		)

@dp.message_handler(state=ClientStates.usd_uah)
async def create_income(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		user_id = message.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			data['usd_uah'] = message.text
			await message.answer(
				f"*{data['usd_uah']}* –¥–æ–ª = *{usd_uah_convertor(data['usd_uah'])}* –≥—Ä–Ω",
				parse_mode='Markdown',
				reply_markup=keyboard_back
			)

@dp.callback_query_handler(lambda query: query.data == 'usd_egp')
async def administrator_usd_egp(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status == 'administrator':
		await ClientStates.usd_egp.set()

		await bot.send_message(
			callback_query.from_user.id,
			'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã *USD(–î–û–õ)*, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ *EGP(–õ–ï)*:',
			parse_mode='Markdown',
			reply_markup=keyboard_back
		)

@dp.message_handler(state=ClientStates.usd_egp)
async def create_income(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		user_id = message.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			data['usd_egp'] = message.text
			await message.answer(
				f"*{data['usd_egp']}* –¥–æ–ª = *{usd_egp_convertor(data['usd_egp'])}* –ª–µ",
				parse_mode='Markdown',
				reply_markup=keyboard_back
			)

@dp.callback_query_handler(lambda query: query.data == 'uah_egp')
async def administrator_usd_egp(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status == 'administrator':
		await ClientStates.uah_egp.set()

		await bot.send_message(
			callback_query.from_user.id,
			'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã *UAH(–ì–†–ù)*, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ *EGP(–õ–ï)*:',
			parse_mode='Markdown',
			reply_markup=keyboard_back
		)

@dp.message_handler(state=ClientStates.uah_egp)
async def create_income(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		user_id = message.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			data['uah_egp'] = message.text
			await message.answer(
				f"*{data['uah_egp']}* –≥—Ä–Ω = *{uah_egp_convertor(data['uah_egp'])}* –ª–µ",
				parse_mode='Markdown',
				reply_markup=keyboard_back
			)

@dp.callback_query_handler(lambda query: query.data == 'uah_try')
async def administrator_uah_try(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)

	if user_status == 'administrator':
		await ClientStates.uah_try.set()

		await bot.send_message(
			callback_query.from_user.id,
			'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã *UAH(–ì–†–ù)*, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ *TRY(–õ–ò–†)*:',
			parse_mode='Markdown',
			reply_markup=keyboard_back
		)

@dp.message_handler(state=ClientStates.uah_try)
async def uah_try_convert(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		user_id = message.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			data['uah_try'] = message.text
			await message.answer(
				f"*{data['uah_try']}* –≥—Ä–Ω = *{uah_try_convertor(data['uah_try'])}* –ª–∏—Ä",
				parse_mode='Markdown',
				reply_markup=keyboard_back
			)

@dp.callback_query_handler(lambda query: query.data == 'job_with_goods')
async def administrator_add_good_photo(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)
	if user_status == 'administrator':
		await bot.send_message(
				callback_query.from_user.id,
				'–§—É–Ω–∫—Ü–∏–∏: ',
				reply_markup=keyboard_goods
			)


@dp.callback_query_handler(lambda query: query.data == 'upload_good')
async def administrator_uah_try(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)
	if user_status == 'administrator':
		await AdministratorUploadHandler.uploading.set()
		await bot.send_message(
				callback_query.from_user.id,
				'*–í–ù–ò–ú–ê–ù–ò–ï*\n\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ–ª—å–∫–æ *–û–î–ù–£* —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: ',
				parse_mode='Markdown',
				reply_markup=keyboard_back
			)

@dp.message_handler(content_types=types.ContentTypes.PHOTO, state=AdministratorUploadHandler.uploading)
async def handle_photo(message: types.Message, state: FSMContext):
	user_id = message.from_user.id
	file_id = message.photo[-1].file_id
	file_info = await bot.get_file(file_id)
	file_path = file_info.file_path
	file_url = f'https://api.telegram.org/file/bot{API_TOKEN}/{file_path}'
	image_data = requests.get(file_url).content
	base64_encoded = base64.b64encode(image_data).decode('utf-8')
	document = {
        'user_id': user_id,
        'file_id': file_id,
        'base64_data': base64_encoded,
		'price':'0',
		'prescription':'0',
		'is_available': '0',
		'name':'0',
		'articul': '0',
		'category': '0',
		'country': '0'
    }
	result = collection_goods.insert_one(document)
	try:
		async with dp['db'].acquire() as connection:
			await connection.execute("""
            INSERT INTO goods (name, description, price, status, article, category, country, base64_data)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        """, 'tbd', 'tbd', 1111, False, 1111, 'tbd', 'tbd', str(base64_encoded))
	except Exception as e:
		print('ERROR', e)
	if result.inserted_id:
		await state.finish()
		await bot.send_message(
            user_id,
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
            reply_markup=keyboard_skip
        )
	else:
		last_document = collection_goods.find_one(sort=[('_id', -1)])

		if last_document:
			last_document_id = last_document['_id']
			collection_goods.delete_one({'_id': last_document_id})
			await state.finish()
			await bot.send_message(
				user_id,
				"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!",
				reply_markup=keyboard_back
			)
		else:
			await state.finish()
			await bot.send_message(
				user_id,
				"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!",
				reply_markup=keyboard_back
			)

@dp.callback_query_handler(lambda query: query.data == 'skip')
async def administrator_presc(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)
	if user_status == 'administrator':
		await ClientStates.presc_good.set()
		await bot.send_message(
				callback_query.from_user.id,
				f'*–í–ù–ò–ú–ê–ù–ò–ï*\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º\n\n{template_reply_rules_of_presc}',
				parse_mode='Markdown'
			)

@dp.message_handler(state=ClientStates.presc_good)
async def presc_good_uploading(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.username
        user_status = get_user_status(user_id)
        
        if user_status == 'administrator':
            data['presc_good'] = message.text
            try:
                name, price, prescription = format_response(data['presc_good'])
                try:
                    prescription = prescription.replace("*", "")
                except:
                    pass
                latest_record = collection_goods.find_one(sort=[('_id', -1)])
                articul = generate_random_4_digit_number()
                while collection_goods.find_one({"articul": articul}):
                    articul = generate_random_4_digit_number()
                try:
                    async with dp['db'].acquire() as connection:
                        await connection.execute("""
                            UPDATE goods
                            SET
                                name = $1,
                                description = $2,
                                price = $3,
                                status = $4,
                                article = $5
                            WHERE
                                id = (SELECT id FROM goods ORDER BY id DESC LIMIT 1);
                        """, str(name), str(prescription), float(price), True, int(articul))
                except Exception as e:
                    print('ERROR', e)
                collection_goods.update_one({'_id': latest_record['_id']}, {'$set': {'price': price}})
                collection_goods.update_one({'_id': latest_record['_id']}, {'$set': {'prescription': prescription}})
                collection_goods.update_one({'_id': latest_record['_id']}, {'$set': {'is_available': '1'}})
                collection_goods.update_one({'_id': latest_record['_id']}, {'$set': {'name': name}})
                collection_goods.update_one({'_id': latest_record['_id']}, {'$set': {'articul': articul}})

                await state.finish()
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø–æ—Å—Ç–∞–≤—â–∏–∫: ', reply_markup=keyboard_country)
            except TypeError:
                latest_record = collection_goods.find_one(sort=[('_id', -1)])
                last_document_id = latest_record['_id']
                collection_goods.delete_one({'_id': last_document_id})
                try:
                    async with dp['db'].acquire() as connection:
                        await connection.execute("DELETE FROM goods WHERE id = (SELECT id FROM goods ORDER BY id DESC LIMIT 1)")
                except Exception as e:
                    print('ERROR', e)
                await state.finish()
                await message.answer('–î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!', reply_markup=keyboard_back)


@dp.callback_query_handler(lambda query: query.data.startswith("country_"))
async def show_record_callback(callback_query: types.CallbackQuery):
	country_name = str(callback_query.data.split("_")[1])
	latest_record = collection_goods.find_one(sort=[('_id', -1)])
	if latest_record:
		collection_goods.update_one({'_id': latest_record['_id']}, {'$set': {'country': country_name}})
		try:
			async with dp['db'].acquire() as connection:
				await connection.execute("""
					UPDATE goods
					SET
						country = $1
					WHERE
						id = (SELECT id FROM goods ORDER BY id DESC LIMIT 1);
				""", str(country_name))
		except Exception as e:
			print('ERROR', e)
		await bot.send_message(callback_query.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ", reply_markup=keyboard_category)
	else:
		await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", reply_markup=keyboard_back)

@dp.callback_query_handler(lambda query: query.data.startswith("category_"))
async def show_record_callback(callback_query: types.CallbackQuery):
	category_name = str(callback_query.data.split("_")[1])
	latest_record = collection_goods.find_one(sort=[('_id', -1)])
	if latest_record:
		collection_goods.update_one({'_id': latest_record['_id']}, {'$set': {'category': category_name}})
		try:
			async with dp['db'].acquire() as connection:
				await connection.execute("""
					UPDATE goods
					SET
						category = $1
					WHERE
						id = (SELECT id FROM goods ORDER BY id DESC LIMIT 1);
				""", str(category_name))
		except Exception as e:
			print('ERROR', e)
		await bot.send_message(callback_query.from_user.id, "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Å–µ–π –µ–∫–æ—Å–∏—Å—Ç–µ–º–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!", reply_markup=keyboard_back)
	else:
		await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", reply_markup=keyboard_back)

@dp.callback_query_handler(lambda query: query.data == 'list_of_goods')
async def administrator_list_of_goods(callback_query: types.CallbackQuery, state:FSMContext):
	async with state.proxy() as data:
		user_id = callback_query.from_user.username
		user_status = get_user_status(user_id)
		page = 1
		if user_status == 'administrator':
			records_amount = collection_goods.count_documents({})
			if records_amount == 0:
				await callback_query.bot.send_message(
					callback_query.from_user.id,
					f'–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {records_amount} –∑–∞–ø–∏—Å–µ–π.',
					reply_markup=keyboard_back
				)
			else:
				keyboard_list = InlineKeyboardMarkup().add(
					InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–π—Ç–∏", callback_data='back'),
					InlineKeyboardButton("‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data=f'kback_{page-1}'),
					InlineKeyboardButton("‚è≠Ô∏è –î–∞–ª–µ–µ", callback_data=f'kskip_{page+1}')
				)
				keyboard_list_without_carousel = InlineKeyboardMarkup().add(
					InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–π—Ç–∏", callback_data='back'),
				)
				buttons = []
				for record in collection_goods.find():
					articul = record['articul']
					text = record['name']
					callback_data = f"show_record_goods{record['_id']}"
					buttons.append(text)
					keyboard_list.add(InlineKeyboardButton(f"{articul} {text}", callback_data=callback_data))
				if len(buttons) < 10:
					for record in collection_goods.find():
						articul = record['articul']
						text = record['name']
						callback_data = f"show_record_goods{record['_id']}"
						keyboard_list_without_carousel.add(InlineKeyboardButton(f"{articul} {text}", callback_data=callback_data))
					await callback_query.bot.send_message(
						callback_query.from_user.id,
						f'–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {records_amount} –∑–∞–ø–∏—Å–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
						reply_markup=keyboard_list_without_carousel,
					)
				else:
					msg = await callback_query.bot.send_message(
						callback_query.from_user.id,
						f'–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {records_amount} –∑–∞–ø–∏—Å–µ–π. –°—Ç—Ä–∞–Ω–∏—Ü–∞{page}:',
						reply_markup=display_records(page, 10),
					)
					data['msg_id_keyb'] = msg.message_id

@dp.callback_query_handler(lambda query: query.data.startswith('kskip_'))
async def skip_keyboard(callback_query: types.CallbackQuery, state:FSMContext):
	async with state.proxy() as data:
		user_id = callback_query.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			page = str(callback_query.data.split("_")[1])
			msg_id_keyb = data.get('msg_id_keyb')
			chat_id=callback_query.message.chat.id
			records_amount = collection_goods.count_documents({})
			await callback_query.bot.edit_message_text(
				text=f'–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {records_amount} –∑–∞–ø–∏—Å–µ–π. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:',
				chat_id=chat_id,
				message_id=msg_id_keyb,
				reply_markup=display_records(int(page), 10)
			)

@dp.callback_query_handler(lambda query: query.data.startswith('kback_'))
async def skip_keyboard(callback_query: types.CallbackQuery, state:FSMContext):
	async with state.proxy() as data:
		user_id = callback_query.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			msg_id_keyb = data.get('msg_id_keyb')
			page = str(callback_query.data.split("_")[1])
			chat_id=callback_query.message.chat.id
			if int(page)<1:
				await callback_query.bot.send_message(
					callback_query.from_user.id,
					f'–û—à–∏–±–∫–∞ –∏—Ç–µ–Ω–¥–µ—Ñ–µ–∫–∞—Ç–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
					reply_markup=keyboard_back,
				)
			else:
				records_amount = collection_goods.count_documents({})
				await callback_query.bot.edit_message_text(
					text=f'–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {records_amount} –∑–∞–ø–∏—Å–µ–π. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:',
					chat_id=chat_id,
					message_id=msg_id_keyb,
					reply_markup=display_records(int(page), 10)
				)

@dp.callback_query_handler(lambda query: query.data.startswith("show_record_goods"))
async def show_record_callback(callback_query: types.CallbackQuery, state:FSMContext):
	async  with state.proxy() as data:
		record_id = str(callback_query.data.split("_")[2])
		word_to_remove = "goods"
		result_string = record_id.replace(word_to_remove, "")
		record = collection_goods.find_one({"_id": ObjectId(result_string)})

		if record:
			photo = record.get('base64_data')
			photo_binary = base64.b64decode(photo)
			name = record.get('name')
			price = record.get('price')
			prescription = record.get('prescription')
			is_available = record.get('is_available')
			articul = record.get('articul')
			country = record.get('country')
			category = record.get('category')
			
			keyboard = InlineKeyboardMarkup(row_width=2)
			back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
			keyboard.add(back_button)
			
			caption = f'#Ô∏è*{articul}*\nüìõ*{name}* - *{price}*‚Ç¥\n–°—Ç–∞—Ç—É—Å - {"‚ùå" if is_available == "0" else "‚úîÔ∏è"}\n–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å - {"üá™üá¨" if country == "egypt" else "üáπüá∑"}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {translate_text(str(category))}\n\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: \n\n{prescription}'
			caption_without_desc = f'#Ô∏è*{articul}*\nüìõ*{name}* - *{price}*‚Ç¥\n–°—Ç–∞—Ç—É—Å - {"‚ùå" if is_available == "0" else "‚úîÔ∏è"}\n–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å - {"üá™üá¨" if country == "egypt" else ("üáπüá∑" if country == "turkey" else "üá¶üá™")}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {translate_text(str(category))}'
			if len(caption)<255:
				await bot.send_photo(callback_query.from_user.id, photo_binary, caption=caption, reply_markup=keyboard_back, parse_mode='Markdown')
			else:
				
				await bot.send_photo(callback_query.from_user.id, photo_binary, caption=caption_without_desc, parse_mode='Markdown')
				msg = await bot.send_message(callback_query.from_user.id, prescription, reply_markup=keyboard_back_prescr)
				data['msg_id'] = msg.message_id
		else:
			await bot.send_message(callback_query.from_user.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=keyboard_back)

@dp.callback_query_handler(lambda query: query.data == 'settings')
async def get_articul(callback_query: types.CallbackQuery):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)
	if user_status == 'administrator':
		existing_records = collection_goods.count_documents({})
		if existing_records>0:
			await ClientStates.get_articul.set()
			await bot.send_message(
					callback_query.from_user.id,
					f'*–í–ù–ò–ú–ê–ù–ò–ï*\n–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–æ–π –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±–µ–∑ –∑–Ω–∞–∫–∞ —Ä–µ—à–µ—Ç–∫–∏: ',
					parse_mode='Markdown'
				)
		else:
			await bot.send_message(
					callback_query.from_user.id,
					f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!',
					reply_markup=keyboard_back
				)

@dp.message_handler(state=ClientStates.get_articul)
async def settings_of_good(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		user_id = message.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			data['get_articul'] = message.text
			record = collection_goods.find_one({"articul": int(data['get_articul'])})
			if record:
				photo = record.get('base64_data')
				photo_binary = base64.b64decode(photo)
				name = record.get('name')
				price = record.get('price')
				prescription = record.get('prescription')
				is_available = record.get('is_available')
				articul = record.get('articul')
				country = record.get('country')
				category = record.get('category')
				
				keyboard = InlineKeyboardMarkup(row_width=2)
				back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
				keyboard.add(back_button)
				
				caption = f'#Ô∏è*{articul}*\nüìõ*{name}* - *{price}*‚Ç¥\n–°—Ç–∞—Ç—É—Å - {"‚ùå" if is_available == "0" else "‚úîÔ∏è"}\n–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å - {"üá™üá¨" if country == "egypt" else "üáπüá∑"}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {translate_text(str(category))}\n\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: \n\n{prescription}'
				if len(caption) <255:
					photo = await bot.send_photo(message.from_user.id, photo_binary, caption=caption, reply_markup=keyboard_settings_list, parse_mode='Markdown')
				else:
					caption_without_desc = f'#Ô∏è*{articul}*\nüìõ*{name}* - *{price}*‚Ç¥\n–°—Ç–∞—Ç—É—Å - {"‚ùå" if is_available == "0" else "‚úîÔ∏è"}\n–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫ - {"üá™üá¨" if country == "egypt" else "üáπüá∑"}\n–ö–∞—Ç–µ–≥–æ—Äi—è - {translate_text(str(category))}'
					photo = await bot.send_photo(message.from_user.id, photo_binary, caption=caption_without_desc, parse_mode='Markdown')
					await bot.send_message(message.from_user.id, prescription, reply_markup=keyboard_settings_list)
			else:
				await state.finish()
				await bot.send_message(message.from_user.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=keyboard_back)

@dp.callback_query_handler(lambda query: query.data.startswith("set_name"), state=ClientStates.get_articul)
async def set_name_handler(callback_query: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		articul = int(data.get('get_articul'))
		if articul:
			await ClientStates.get_name.set()
			await bot.send_message(
				callback_query.from_user.id,
				f'*–í–ù–ò–ú–ê–ù–ò–ï*\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ',
				parse_mode='Markdown'
			)
		else:
			await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message_handler(state=ClientStates.get_name)
async def set_name_func(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.username
        user_status = get_user_status(user_id)
        if user_status == 'administrator':
            data['get_name'] = message.text
            new_name = data['get_name']
            articul = int(data.get('get_articul'))
            collection_goods.update_one({"articul": articul}, {"$set": {"name": new_name}})
            try:
                async with dp['db'].acquire() as connection:
                    await connection.execute("UPDATE goods SET name = $1 WHERE article = $2", new_name, articul)
            except Exception as e:
                print('ERROR', e)
            await bot.send_message(
                message.from_user.id,
                f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º - *{articul}*',
                parse_mode='Markdown',
                reply_markup=keyboard_back
            )
            await state.finish()


@dp.callback_query_handler(lambda query: query.data.startswith("set_price"), state=ClientStates.get_articul)
async def set_price_handler(callback_query: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		articul = int(data.get('get_articul'))
		if articul:
			await ClientStates.get_price.set()
			await bot.send_message(
				callback_query.from_user.id,
				f'*–í–ù–ò–ú–ê–ù–ò–ï*\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞: ',
				parse_mode='Markdown'
			)
		else:
			await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
			await state.finish()

@dp.message_handler(state=ClientStates.get_price)
async def set_price_func(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.username
        user_status = get_user_status(user_id)
        if user_status == 'administrator':
            data['get_price'] = message.text
            articul = int(data.get('get_articul'))
            collection_goods.update_one({'articul': articul}, {'$set': {'price': int(data['get_price'])}})
            try:
                async with dp['db'].acquire() as connection:
                    await connection.execute("UPDATE goods SET price = $1 WHERE article = $2", int(data['get_price']), articul)
            except Exception as e:
                print('ERROR', e)
            await state.finish()
            await bot.send_message(
                message.from_user.id,
                f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º - *{articul}*',
                parse_mode='Markdown',
                reply_markup=keyboard_back
            )
            await state.finish()


@dp.callback_query_handler(lambda query: query.data.startswith("set_prescription"), state=ClientStates.get_articul)
async def set_prescription_handler(callback_query: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		articul = int(data.get('get_articul'))
		if articul:
			await ClientStates.get_prescription.set()
			await bot.send_message(
				callback_query.from_user.id,
				f'*–í–ù–ò–ú–ê–ù–ò–ï*\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ',
				parse_mode='Markdown'
			)
		else:
			await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
			await state.finish()

@dp.message_handler(state=ClientStates.get_prescription)
async def set_prescription_func(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.username
        user_status = get_user_status(user_id)
        if user_status == 'administrator':
            data['get_prescription'] = message.text
            articul = int(data.get('get_articul'))
            collection_goods.update_one({'articul': articul}, {'$set': {'prescription': data['get_prescription']}})
            try:
                async with dp['db'].acquire() as connection:
                    await connection.execute("UPDATE goods SET description = $1 WHERE article = $2", str(data['get_prescription']), articul)
            except Exception as e:
                print('ERROR', e)
            await state.finish()
            await bot.send_message(
                message.from_user.id,
                f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º - *{articul}*',
                parse_mode='Markdown',
                reply_markup=keyboard_back
            )
            await state.finish()


@dp.callback_query_handler(lambda query: query.data.startswith("set_status"), state=ClientStates.get_articul)
async def set_status_handler(callback_query: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		articul = int(data.get('get_articul'))
		if articul:
			await bot.send_message(
				callback_query.from_user.id,
				f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º *{articul}*",
				reply_markup=keyboard_status,
				parse_mode='Markdown'
			)
		else:
			await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
			await state.finish()

@dp.callback_query_handler(lambda query: query.data.startswith("delete_good"), state=ClientStates.get_articul)
async def set_status_handler(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        articul = int(data.get('get_articul'))
        if articul:
            result_mongo = collection_goods.delete_one({"articul": articul})

            try:
                async with dp['db'].acquire() as connection:
                    await connection.execute("DELETE FROM goods WHERE article = $1 RETURNING *", articul)
            except Exception as e:
                print('ERROR', e)

            if result_mongo.deleted_count == 1:
                await state.finish()
                await bot.send_message(
                    callback_query.from_user.id,
                    f"–í—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º *{articul}*",
                    reply_markup=keyboard_back,
                    parse_mode='Markdown'
                )
            else:
                await state.finish()
                await bot.send_message(
                    callback_query.from_user.id,
                    f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è! –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º *{articul}* –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                    reply_markup=keyboard_back,
                    parse_mode='Markdown'
                )


@dp.callback_query_handler(lambda query: query.data == 'set_yes', state=ClientStates.get_articul)
async def set_yes(callback_query: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		user_id = callback_query.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			articul = int(data.get('get_articul'))
			if articul:
				collection_goods.update_one({'articul': articul}, {'$set': {'is_available': '1'}})
				try:
					async with dp['db'].acquire() as connection:
						await connection.execute("UPDATE goods SET status = $1 WHERE article = $2", True, articul)
				except Exception as e:
					print('ERROR', e)
				await bot.send_message(
				callback_query.from_user.id,
				f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º - {articul}',
				reply_markup=keyboard_back
			)
				await state.finish()
			else:
				await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
				await state.finish()

@dp.callback_query_handler(lambda query: query.data == 'set_no', state=ClientStates.get_articul)
async def set_no(callback_query: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		user_id = callback_query.from_user.username
		user_status = get_user_status(user_id)
		if user_status == 'administrator':
			articul = int(data.get('get_articul'))
			if articul:
				collection_goods.update_one({'articul': articul}, {'$set': {'is_available': '0'}})
				try:
					async with dp['db'].acquire() as connection:
						await connection.execute("UPDATE goods SET status = $1 WHERE article = $2", False, articul)
				except Exception as e:
					print('ERROR', e)
				await bot.send_message(
				callback_query.from_user.id,
				f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º - *{articul}*',
				parse_mode='Markdown',
				reply_markup=keyboard_back
			)
				await state.finish()
			else:
				await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
				await state.finish()

@dp.callback_query_handler(lambda query: query.data == 'back', state='*')
async def back_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)
	if user_status == 'administrator':
		await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_admin)
	else:
		await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_main)
	await state.reset_state()

@dp.callback_query_handler(lambda query: query.data == 'back_prescr', state='*')
async def back_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)
	if user_status == 'administrator':
		await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_admin)
	else:
		await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_main)
	await state.reset_state()

@dp.callback_query_handler(lambda query: query.data == 'back_skip', state='*')
async def back_button_skip_callback(callback_query: types.CallbackQuery, state: FSMContext):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)
	if user_status == 'administrator':
		latest_record = collection_goods.find_one(sort=[('_id', -1)])
		if latest_record:
			collection_goods.delete_one({'_id': latest_record['_id']})
			try:
				async with dp['db'].acquire() as connection:
					await connection.execute("DELETE FROM goods WHERE id = (SELECT id FROM goods ORDER BY id DESC LIMIT 1)")
			except Exception as e:
				print('ERROR', e)
			await state.finish()
			await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_admin)
		else:
			await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_admin)
	await state.reset_state()

@dp.callback_query_handler(lambda query: query.data == 'back_prescr', state='*')
async def back_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		user_id = callback_query.from_user.username
		user_status = get_user_status(user_id)
		try:
			await bot.delete_message(chat_id=callback_query.from_user.id, message_id=data.get('msg_id'))
		except:
			pass
		if user_status == 'administrator':
			await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_admin)
		else:
			await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_main)
		await state.reset_state()

@dp.callback_query_handler(lambda query: query.data == 'back_to_lang', state='*')
async def back_button_lang_callback(callback_query: types.CallbackQuery, state: FSMContext):
	await start_buttons(callback_query.message)
	await state.reset_state()

#handlers(RU, default GUI)

@dp.callback_query_handler(lambda c: c.data == 'lang_ru_def')
async def process_create_question(callback_query: types.CallbackQuery):
    keyboard_main = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ùì –°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data='create_question')
    )

    await bot.send_message(
		callback_query.from_user.id,
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{callback_query.from_user.first_name}*!\n\n–ú—ã —Å–æ–∂–∞–ª–µ–µ–º –æ —Ç–æ–º, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π:',
        reply_markup=keyboard_main,
        parse_mode='Markdown'
    )

@dp.callback_query_handler(lambda c: c.data == 'create_question')
async def process_create_question_callback(callback_query: types.CallbackQuery):

    await ClientStates.ticket.set()
    await bot.send_message(callback_query.from_user.id, f'{template_reply}', parse_mode=types.ParseMode.MARKDOWN)
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø—Ä–æ—á–∏–µ —Ñ–∞–π–ª—ã: ', reply_markup=keyboard_back)

@dp.message_handler(state=ClientStates.ticket, content_types=[ContentType.TEXT])
async def create_ticket(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['ticket'] = message.text
		user_id = message.from_user.username
		id_user = message.from_user.id
		user_text = message.text
		last_ticket = collection_tickets.find().sort([('number', -1)]).limit(1)
		try:
			last_ticket_number = next(last_ticket)['number']
		except:
			last_ticket_number = 0
		user_records = collection_users.find_one({'tg_name': user_id})
		date = get_time_from_datetime(str(message.date))
		if user_id in admins:
			status = 'administrator'
		else:
			status = 'default'
		if user_text in check_in:
			await state.finish()
			await message.answer('–ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç–∞ !', reply_markup=keyboard_main)
		elif user_text == '/start':
			await state.finish()
			await message.answer(
				f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name}*!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
				reply_markup=keyboard_lang,
				parse_mode='Markdown'
			)
		elif user_id == None:
			await state.finish()
			await message.answer('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID.', reply_markup=keyboard_main)
		else:
			if user_records == None:
					new_ticket_number = last_ticket_number + 1
					ticket_text = f"–¢–∏–∫–µ—Ç ‚Ññ{new_ticket_number}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  @{user_id}\n\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:  {date}\n\n–¢–µ–ª–æ —Ç–∏–∫–µ—Ç–∞:\n{data['ticket']}"
					user = {
						'tg_name': user_id,
                        'status': status
                    }
					ticket = {
						'user_id': id_user,
						'tg_name': user_id,
                        'prompt': data['ticket'],
                        'date': date,
						'number': new_ticket_number
                    }
					collection_users.insert_one(user)
					collection_tickets.insert_one(ticket)
					await state.finish()
					await message.answer(f'{user_id}, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—å—Å—è\n–í —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ !\n\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - {date}', reply_markup=keyboard_back)
					await bot.send_message(6928296134, ticket_text)
			else:
				if can_make_new_ticket(get_last_ticket_time(user_id)):
					new_ticket_number = last_ticket_number + 1
					ticket_text = f"–¢–∏–∫–µ—Ç ‚Ññ{new_ticket_number}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  @{user_id}\n\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:  {date}\n\n–¢–µ–ª–æ —Ç–∏–∫–µ—Ç–∞:\n\n{data['ticket']}"
					user = {
						'tg_name': user_id,
                        'status': status
                    }
					ticket = {
						'user_id': id_user,
						'tg_name': user_id,
                        'prompt': data['ticket'],
                        'date': date,
						'number': new_ticket_number
                    }
					collection_tickets.insert_one(ticket)
					await state.finish()
					await message.answer(f'{user_id},–≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—å—Å—è\n–í —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ !\n\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - {date}', reply_markup=keyboard_back)
					await bot.send_message(6928296134, ticket_text)
				else:
					await state.finish()
					await message.answer(f'{user_id}, —Å–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—à–ª–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ !', reply_markup=keyboard_lang)

@dp.message_handler(state=ClientStates.ticket, content_types=[ContentType.PHOTO])
async def create_ticket_photo(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.", reply_markup=keyboard_back)

#handlers(UA, default GUI)

@dp.callback_query_handler(lambda c: c.data == 'lang_ua_def')
async def process_create_question(callback_query: types.CallbackQuery):
    keyboard_main_ua = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ùì –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —É —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É", callback_data='create_question_ua')
    )

    await bot.send_message(
		callback_query.from_user.id,
        f'–î–æ–±—Ä–∏–π –¥–µ–Ω—å, *{callback_query.from_user.first_name}*!\n\n–ù–∞–º –¥—É–∂–µ –Ω–µ–ø—Ä–∏—î–º–Ω–æ, —â–æ –≤–∏ –º–∞—î—Ç–µ —è–∫—ñ—Å—å –ø—Ä–æ–±–ª–µ–º–∏, –æ—Å—å —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π:',
        reply_markup=keyboard_main_ua,
        parse_mode='Markdown'
    )

@dp.callback_query_handler(lambda c: c.data == 'create_question_ua')
async def process_create_question_callback(callback_query: types.CallbackQuery):

    await ClientStates.ticket_ua.set()
    await bot.send_message(callback_query.from_user.id, f'{template_reply_ua}', parse_mode=types.ParseMode.MARKDOWN)
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–∞ —ñ–Ω—à—ñ —Ñ–∞–π–ª–∏: ', reply_markup=keyboard_back_ua)

@dp.message_handler(state=ClientStates.ticket_ua, content_types=[ContentType.TEXT])
async def create_ticket(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['ticket'] = message.text
		user_id = message.from_user.username
		id_user = message.from_user.id
		user_text = message.text
		last_ticket = collection_tickets.find().sort([('number', -1)]).limit(1)
		try:
			last_ticket_number = next(last_ticket)['number']
		except:
			last_ticket_number = 0
		user_records = collection_users.find_one({'tg_name': user_id})
		date = get_time_from_datetime(str(message.date))
		if user_id in admins:
			status = 'administrator'
		else:
			status = 'default'
		if user_text in check_in:
			await state.finish()
			await message.answer('–ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—Ö–∏—Å—Ç!', reply_markup=keyboard_main_ua)
		elif user_text == '/start':
			await state.finish()
			await message.answer(
				f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name}*!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
				reply_markup=keyboard_lang,
				parse_mode='Markdown'
			)
		elif user_id == None:
			await state.finish()
			await message.answer('–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID.', reply_markup=keyboard_main_ua)
		else:
			if user_records == None:
					new_ticket_number = last_ticket_number + 1
					ticket_text = f"–¢–∏–∫–µ—Ç ‚Ññ{new_ticket_number}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  @{user_id}\n\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:  {date}\n\n–¢–µ–ª–æ —Ç–∏–∫–µ—Ç–∞:\n{data['ticket']}"
					user = {
						'tg_name': user_id,
                        'status': status
                    }
					ticket = {
						'user_id': id_user,
						'tg_name': user_id,
                        'prompt': data['ticket'],
                        'date': date,
						'number': new_ticket_number
                    }
					collection_users.insert_one(user)
					collection_tickets.insert_one(ticket)
					await state.finish()
					await message.answer(f'{user_id}, –≤–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è\n–ü—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –∑–≤`—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏, –¥—è–∫—É—é –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!\n\n–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ - {date}', reply_markup=keyboard_back_ua)
					await bot.send_message(6928296134, ticket_text)
			else:
				if can_make_new_ticket(get_last_ticket_time(user_id)):
					new_ticket_number = last_ticket_number + 1
					ticket_text = f"–¢–∏–∫–µ—Ç ‚Ññ{new_ticket_number}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  @{user_id}\n\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:  {date}\n\n–¢–µ–ª–æ —Ç–∏–∫–µ—Ç–∞:\n\n{data['ticket']}"
					user = {
						'tg_name': user_id,
                        'status': status
                    }
					ticket = {
						'user_id': id_user,
						'tg_name': user_id,
                        'prompt': data['ticket'],
                        'date': date,
						'number': new_ticket_number
                    }
					collection_tickets.insert_one(ticket)
					await state.finish()
					await message.answer(f'{user_id}, –≤–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è\n–ü—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –∑–≤`—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏, –¥—è–∫—É—é –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!\n\n–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ - {date}', reply_markup=keyboard_back_ua)
					await bot.send_message(6928296134, ticket_text)
				else:
					await state.finish()
					await message.answer(f'{user_id}, –Ω–∞—Å—Ç—É–ø–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É –≤—ñ–¥ —á–∞—Å—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –º–∏–Ω—É–ª–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è!', reply_markup=keyboard_lang)

@dp.message_handler(state=ClientStates.ticket_ua, content_types=[ContentType.PHOTO])
async def create_ticket_photo(message: types.Message):
    await message.answer("–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —è –ø—Ä–∏–π–º–∞—é –ª–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.", reply_markup=keyboard_back_ua)

@dp.callback_query_handler(lambda query: query.data == 'back_ua', state='*')
async def back_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
	user_id = callback_query.from_user.username
	user_status = get_user_status(user_id)
	if user_status == 'administrator':
		await bot.send_message(callback_query.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard_admin)
	else:
		await bot.send_message(callback_query.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard_main_ua)
	await state.reset_state()

#bot pooling

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)